void clear_priority_queue()
{
   uint8_t n;
   
   for (n = 0; n < MAX_PRIORITY_QUEUE_ITEMS; n++)
   {
      global_priority_queue[n] = EMPTY_PRIORITY_QUEUE;
   }
}

uint8_t pop_priority_queue()
// Checks the priority queue and returns the current item to execute
{
   uint8_t priority_queue_command_to_execute;
   
   //no items in the queue (current location is 0-1)
   if (global_current_priority_queue_location == 255)
   {
      return EMPTY_PRIORITY_QUEUE;
   }
   else
   {
      //save the current command to execute
      priority_queue_command_to_execute = global_priority_queue[global_current_priority_queue_location];
      //erase the current command and decrement the current queue location
      global_priority_queue[global_current_priority_queue_location] = 0;
      global_current_priority_queue_location--;
      //return the command to execute
      return priority_queue_command_to_execute;
   }
}

int1 push_priority_queue(uint8_t new_priority_queue_item)
// pushes a new item into the priority queue and sorts it.
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
  
   //if queue is full, return 0
   if (global_current_priority_queue_location == (MAX_PRIORITY_QUEUE_ITEMS - 1))
   {
      return 0;
   }
   
   //increment the queue location and
   //set the new item at the top of the queue (will be sorted in a sec)
   global_current_priority_queue_location++;
   global_priority_queue[global_current_priority_queue_location] = new_priority_queue_item;
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_priority_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_priority_queue[n] > global_priority_queue[n-1])
      {
         //do a swap reusing new queue item variable as a temp
         new_priority_queue_item = global_priority_queue[n];
         global_priority_queue[n] = global_priority_queue[n-1];
         global_priority_queue[n-1] = new_priority_queue_item;
      }
      //item is in the proper place (assuming queue always sorted properly)
      else
      {
         return 1;
      }
   }
   return 1;
}

void push_priority_queue_ISR(uint8_t new_priority_queue_item)
// pushes a new item into the priority queue and sorts it.
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
  
   //if queue is full, return 0
   if (global_current_priority_queue_location == (MAX_PRIORITY_QUEUE_ITEMS - 1))
   {
      return;
   }
   
   //increment the queue location and
   //set the new item at the top of the queue (will be sorted in a sec)
   global_current_priority_queue_location++;
   global_priority_queue[global_current_priority_queue_location] = new_priority_queue_item;
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_priority_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_priority_queue[n] > global_priority_queue[n-1])
      {
         //do a swap reusing new queue item variable as a temp
         new_priority_queue_item = global_priority_queue[n];
         global_priority_queue[n] = global_priority_queue[n-1];
         global_priority_queue[n-1] = new_priority_queue_item;
      }
   }
   return; 
}

void clear_time_queue()
{
   uint8_t n;
   
   for (n = 0; n < MAX_TIME_QUEUE_ITEMS; n++)
   {
      global_time_queue[n].pq_priority = 0;
      global_time_queue[n].time_to_execute = 0;
   }
}

int1 pop_time_queue()
// Checks the time queue and sends the item to execute to the priority queue
{
   struct TimeQueueItem time_queue_command_to_execute;
   
   //no items in the queue (current location is 0-1)
   if (global_current_time_queue_location == (0-1))
   {
      return EMPTY_TIME_QUEUE;
   }
   else
   {
      //save the current command to execute
      time_queue_command_to_execute.pq_priority = global_time_queue[global_current_time_queue_location].pq_priority;
      
      //erase the current command and decrement the current queue location
      global_time_queue[global_current_time_queue_location].pq_priority = 0;
      global_time_queue[global_current_time_queue_location].time_to_execute = 0;
      global_current_time_queue_location--;
      
      //send queue item to the priority queue and return the result from adding it to the PQ
      return push_priority_queue(time_queue_command_to_execute.pq_priority);
   }
}

void pop_time_queue_ISR()
// Checks the time queue and sends the item to execute to the priority queue
{
   uint8_t priority;
   
   //no items in the queue (current location is 0-1)
   if (global_current_time_queue_location == 255)
   {
      return;
   }
   else
   {
      //save the current command to execute
      priority = global_time_queue[global_current_time_queue_location].pq_priority;
      
      //erase the current command and decrement the current queue location
      global_time_queue[global_current_time_queue_location].pq_priority = 0;
      global_time_queue[global_current_time_queue_location].time_to_execute = 0;
      global_current_time_queue_location--;
      
      //send queue item to the priority queue and return the result from adding it to the PQ
      push_priority_queue_ISR(priority);
      return;
   }
}

int1 push_time_queue(uint32_t time_to_execute, uint8_t priority)
// pushes a new item into the time queue and sorts it (by time).
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
     
   //if queue is full, return 0
   if (global_current_time_queue_location == (MAX_TIME_QUEUE_ITEMS - 1))
   {
      return 0;
   }
   
   // increment the time queue location and
   // set the new item at the top of the queue (will be sorted in a sec)
   global_current_time_queue_location++;
   global_time_queue[global_current_time_queue_location].pq_priority = priority;
   global_time_queue[global_current_time_queue_location].time_to_execute = time_to_execute;
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_time_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_time_queue[n].time_to_execute > global_time_queue[n-1].time_to_execute)
      {
         //do a swap reusing new queue item variable as a temp
         priority = global_time_queue[n].pq_priority;
         global_time_queue[n].pq_priority = global_time_queue[n-1].pq_priority;
         global_time_queue[n-1].pq_priority = priority;
         time_to_execute = global_time_queue[n].time_to_execute;
         global_time_queue[n].time_to_execute = global_time_queue[n-1].time_to_execute;
         global_time_queue[n-1].time_to_execute = time_to_execute;
         
      }
      //item is in the proper place (assuming queue always sorted properly)
      else
      {
         return 1;
      }
   }
   return 1;
}

void push_time_queue_ISR(uint32_t time_to_execute, uint8_t priority)
// pushes a new item into the time queue and sorts it (by time).
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
     
   //if queue is full, return 0
   if (global_current_time_queue_location == (MAX_TIME_QUEUE_ITEMS - 1))
   {
      return;
   }
   
   // increment the time queue location and
   // set the new item at the top of the queue (will be sorted in a sec)
   global_current_time_queue_location++;
   global_time_queue[global_current_time_queue_location].pq_priority = priority;
   global_time_queue[global_current_time_queue_location].time_to_execute = time_to_execute;
      
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_time_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_time_queue[n].time_to_execute > global_time_queue[n-1].time_to_execute)
      {
         //do a swap reusing new queue item variable as a temp
         priority = global_time_queue[n].pq_priority;
         global_time_queue[n].pq_priority = global_time_queue[n-1].pq_priority;
         global_time_queue[n-1].pq_priority = priority;
         time_to_execute = global_time_queue[n].time_to_execute;
         global_time_queue[n].time_to_execute = global_time_queue[n-1].time_to_execute;
         global_time_queue[n-1].time_to_execute = time_to_execute;
         
      }
   }
   return;
}

void allocate_command_queue(void)
{
   // allocate the memory for the command queue sprinkler zone settings (can't
   //    easily make a struct array inside a struct in c.)

   uint8_t n;
   
   for (n = 0; n < MAX_COMMAND_QUEUE_ITEMS; n++)
   {
      global_command_queue[n].sprinkler_settings =                            \
      (struct SprinklerZoneSettingsItem*)                                     \
      malloc(sizeof (struct SprinklerZoneSettingsItem) * MAX_NUM_SPRINKLER_ZONES);
   }
}

void clear_command_queue(void)
{
   // clears out the command queue and sets the start times to 0-1
   uint8_t n;
   
   // clear the queue compeleted and fill with zeros
   memset(global_command_queue, 0, sizeof global_command_queue);
   
   // sets start times to 0-1 (for unsigned int)
   for (n = 0; n < MAX_COMMAND_QUEUE_ITEMS; n++)
   {
      global_command_queue[n].start_time = 0-1;
   }
   
   // set the queue location to 0-1 which signifies that there isn't anything
   //    in the queue
   global_current_command_queue_location = 0-1;
}

int1 push_command_queue(struct CommandQueueItem new_command_queue_item)
// pushes a new item into the command queue and sorts it (by time).
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
   
   //if queue is full, return 0
   if (global_current_command_queue_location == (MAX_COMMAND_QUEUE_ITEMS - 1))
   {
      return 0;
   }
   
   // increment the command queue location and
   // set the new item at the top of the queue (will be sorted in a sec)
   global_current_command_queue_location++;
   global_command_queue[global_current_command_queue_location] = new_command_queue_item;
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_command_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_command_queue[n].start_time > global_command_queue[n-1].start_time)
      {
         //do a swap reusing new queue item variable as a temp
         new_command_queue_item = global_time_queue[n];
         global_time_queue[n] = global_time_queue[n-1];
         global_time_queue[n-1] = new_command_queue_item;
      }
      //item is in the proper place (assuming queue always sorted properly)
      else
      {
         return 1;
      }
   }
   return 1;
}

void pop_command_queue_ISR()
// pops a new item off the command queue and sorts it (by time).
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
   struct commandQueueItem new_command_queue_item;
   
   //if queue is empty, return 0
   if (global_current_command_queue_location == 255)
   {
      return;
   }
   
   
   // increment the command queue location and
   // set the new item at the top of the queue (will be sorted in a sec)
   global_current_command_queue_location++;
   global_command_queue[global_current_command_queue_location] = new_command_queue_item;
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_command_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_command_queue[n].start_time > global_command_queue[n-1].start_time)
      {
         //do a swap reusing new queue item variable as a temp
         new_command_queue_item = global_time_queue[n];
         global_time_queue[n] = global_time_queue[n-1];
         global_time_queue[n-1] = new_command_queue_item;
      }
      //item is in the proper place (assuming queue always sorted properly)
      else
      {
         return;
      }
   }
   return;
}
void clear_sprinkler_queue()
{
   disable_interrupts(INT_CCP4);
   memset(&global_sprinkler_queue, EMPTY_SPINKLER_QUEUE, sizeof(global_sprinkler_queue));
   global_current_sprinkler_queue_location = 0-1;
   global_rpm_set_value = 0;
   global_control_loop_mechanism = NO_RPM_CONTROL;
   enable_interrupts(INT_CCP4);
}

void push_sprinkler_queue(uint32_t start_time,uint32_t end_time,uint16_t vlv_open_amount,uint16_t spin_rate,uint8_t zone_num, uint8_t control_loop_mechanism)
// pushes a new item into the sprinkler queue and sorts it (by start time).
// returns 1 if everything is good, 0 if queue is full
{
   uint8_t n;
   struct SprinklerQueueItem temp_sprinkler_queue_item;
   
   // disable CCP4 interrupt (RTC timer)
   disable_interrupts(INT_CCP4);
         
   //if queue is full, return 0
   if (global_current_sprinkler_queue_location == (MAX_SPRINKLER_QUEUE_ITEMS - 1))
   {
      enable_interrupts(INT_CCP4);
      return;
   }
   
   // increment the sprinkler queue location and
   // set the new item at the top of the queue (will be sorted in a sec)
   global_current_sprinkler_queue_location++;
   global_sprinkler_queue[global_current_sprinkler_queue_location].start_time = start_time;
   global_sprinkler_queue[global_current_sprinkler_queue_location].end_time = end_time;
   global_sprinkler_queue[global_current_sprinkler_queue_location].vlv_open_amount = vlv_open_amount;
   global_sprinkler_queue[global_current_sprinkler_queue_location].spin_rate = spin_rate;
   global_sprinkler_queue[global_current_sprinkler_queue_location].zone_num = zone_num;
   global_sprinkler_queue[global_current_sprinkler_queue_location].control_loop_mechanism = control_loop_mechanism;
   
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_sprinkler_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_sprinkler_queue[n].start_time > global_sprinkler_queue[n-1].start_time)
      {
         //do a swap reusing new queue item variable as a temp
         memcpy(&temp_sprinkler_queue_item, &global_sprinkler_queue[n], sizeof(&temp_sprinkler_queue_item));
         memcpy(&global_sprinkler_queue[n], &global_sprinkler_queue[n-1], sizeof(&global_sprinkler_queue[n]));
         memcpy(&global_sprinkler_queue[n-1], &temp_sprinkler_queue_item, sizeof(&global_sprinkler_queue[n-1]));
         
      }
      //item is in the proper place (assuming queue always sorted properly)
      else
      {
         enable_interrupts(INT_CCP4);
         return;
      }
   }
   enable_interrupts(INT_CCP4);
   return;
}

void pop_sprinkler_queue_ISR(void)
// Checks the sprinkler queue and sets the sprinkler settings of the item on the top of the queue
{
   //no items in the queue (current location is 0-1)
   if (global_current_sprinkler_queue_location == 255)
   {
      return;
   }
   // pop top item off queue and onto actual settings
   else
   {
      //erase the current command start time (only important thing) and decrement the current queue location
      global_sprinkler_queue[global_current_sprinkler_queue_location].start_time = 0-1;
      global_current_sprinkler_settings_end_time = global_sprinkler_queue[global_current_sprinkler_queue_location].end_time;
      global_sprinkler_queue[global_current_sprinkler_queue_location].end_time = 0;
      global_valve_position_set_value = global_sprinkler_queue[global_current_sprinkler_queue_location].vlv_open_amount;
      global_sprinkler_queue[global_current_sprinkler_queue_location].vlv_open_amount = 0;
      push_time_queue_ISR(global_rtc_time + 3, MOVE_VALVE);
      global_rpm_set_value = global_sprinkler_queue[global_current_sprinkler_queue_location].spin_rate;
      global_sprinkler_queue[global_current_sprinkler_queue_location].spin_rate = 0;
      //global_sprinkler_queue[global_current_sprinkler_queue_location].zone_num;
      global_control_loop_mechanism = global_sprinkler_queue[global_current_sprinkler_queue_location].control_loop_mechanism;
      global_sprinkler_queue[global_current_sprinkler_queue_location].control_loop_mechanism = NO_RPM_CONTROL_DYN_MPPC;
      global_current_sprinkler_queue_location--;
      
      return;
   }
}

void clear_message_queue(void)
{
   // disable conflicting interrupts
   disable_interrupts(INT_CCP4);    
   memset(&global_message_queue, EMPTY_MESSAGE_QUEUE, sizeof(global_message_queue));
   // disable conflicting interrupts
   disable_interrupts(INT_CCP4);
}

void pop_message_queue_and_send_ISR(void) 
// Sends the top of the message queue out, re-adds it to the message stack with a
//    later send time (and attempt number) and sorts it properly.  Since this is
//    only called out of CCP4, all functions are ISR functions
{                      
   
   uint8_t n;                                                   
   struct MessageQueueItem temp_message_queue_item;       

   // no items in the queue (current location is 0-1)
   if (global_current_message_queue_location == 255)
   {
      return;  
   }
   else
   {             
      // If it has met or exceeded the maximum number of attempts, delete it off the queue,
      //    set an error bit, and queue an error message. Attempt num is counted from 0
      if (global_message_queue[global_current_message_queue_location].attempt_num >= (MAX_UNSOLICITED_MESSAGE_ATTEMPTS))
      {
         remove_message_queue_item_ISR(mote_msgSEQ);
         // set an error bit saying a message was missed
         global_error_message_bitfield |= ERR_MSG_UNSOLICITED_MESSAGE_NOT_ACKD;
         push_message_queue_ISR(MSG_MOTE_ERROR_MSG);
      }
      // regular message (not @ max attempts)   
      else
      {               
         // what message type? 
         // resend with unsolicited (0x00 identifier) and it's current message seq
         switch(global_message_queue[global_current_message_queue_location].message_type)
         {
            case MSG_MOTE_HEALTH_REPORT:
               send_health_report_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;                                                                          
            case MSG_MOTE_VALVE_REPORT:   
               send_valve_report_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;
            case MSG_MOTE_JOIN_MSG:
               send_join_msg_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;
            case MSG_MOTE_GPS_POINT_MSG:
               send_gps_point_msg_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;                                        
            case MSG_MOTE_XDCR_READ_MSG:                                                   
               send_pressure_xdcr_msg_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;
            case MSG_MOTE_ERROR_MSG:      
               send_error_msg_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;
            case MSG_MOTE_FULL_REPORT:
               send_full_report_ISR(MSG_MOTE_UNSOLICITED, global_message_queue[global_current_message_queue_location].msg_seq);
               break;
         }
         // increment attempt number and reschedule it to send at a later time (if not ack'd)
         global_message_queue[global_current_message_queue_location].attempt_num++;
         global_message_queue[global_current_message_queue_location].time_to_send+=MESSAGE_RESEND_WAIT_PERIOD;
         
         // starting at the current queue location, sort through the queue
         //    until the item is in the right place
         for (n = global_current_message_queue_location; n > 0; n--)                 
         {
            //if queue items are not sorted properly
            if (global_message_queue[n].time_to_send > global_message_queue[n-1].time_to_send)
            {
               //do a swap
               memcpy(&temp_message_queue_item, &global_message_queue[n], sizeof(&temp_message_queue_item));
               memcpy(&global_message_queue[n], &global_message_queue[n-1], sizeof(&global_message_queue[n]));
               memcpy(&global_message_queue[n-1], &temp_message_queue_item, sizeof(&global_message_queue[n-1]));
            }
            //item is in the proper place (assuming queue always sorted properly)
            else
            {
               return;
            }
         }
      }
   }
}
                                      
void push_message_queue(uint8_t message_type)
// pushes a new item (attempt 0) into the message queue and sorts it.
// returns 1 if everything is good, 0 if queue is full
{                
   uint8_t n;
   struct MessageQueueItem temp_message_queue_item;                            
   
   //if queue is full, return 0                                                     
   if (global_current_message_queue_location == (MAX_MESSAGE_QUEUE_ITEMS - 1))
   {                                            
      return;   
   }
                
                                                                                                
   // if you're trying to add an error message...                   
   if (message_type == MSG_MOTE_ERROR_MSG)
   {
      // check to see if it is the same as the last error message added and if it has happened too recently to resend
      if ((global_error_message_bitfield == last_error_message_sent_bitfield) && ((global_rtc_time - last_error_message_sent_rtc_time) < ERR_MESSAGE_WAIT_PERIOD))
      {        
         return;
      }
      else
      {
         // save the error message bitfield and send time for future comparing and rejecting of duplicate messages
         last_error_message_sent_bitfield = global_error_message_bitfield;
         last_error_message_sent_rtc_time = global_rtc_time;
      }                             
      // look through the current queue
      for (n = global_current_message_queue_location; ((n > 0) && (n != 255)); n--)
      {
         // if there is already another error message on the queue, replace it
         if (global_message_queue[n].message_type == MSG_MOTE_ERROR_MSG)
         {
            // increase the mote sequence number (new message)
            // the ack from the previous one will basically get ignored
            global_message_queue[n].msg_seq = ++mote_msgSEQ;
            // reset the attempts to 0 (new message)
            global_message_queue[n].attempt_num = 0;     
            return;
         }
      }
   }
     
   // increment the queue location and mote message sequence (always first attempt
   //    at a message in this routine
   global_current_message_queue_location++;
   mote_msgSEQ++;
   
   //set the new item at the top of the queue (will be sorted in a sec)
   global_message_queue[global_current_message_queue_location].time_to_send = global_rtc_time;
   global_message_queue[global_current_message_queue_location].message_type = message_type;
   global_message_queue[global_current_message_queue_location].msg_seq = mote_msgSEQ;
   global_message_queue[global_current_message_queue_location].attempt_num = 0;   
         
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_message_queue_location; n > 0; n--)                   
   {                                               
      //if queue items are not sorted properly
      if (global_message_queue[n].time_to_send > global_message_queue[n-1].time_to_send)
      {
         //do a swap
         memcpy(&temp_message_queue_item, &global_message_queue[n], sizeof(&temp_message_queue_item));
         memcpy(&global_message_queue[n], &global_message_queue[n-1], sizeof(&global_message_queue[n]));
         memcpy(&global_message_queue[n-1], &temp_message_queue_item, sizeof(&global_message_queue[n-1]));
      }
      //item is in the proper place (assuming queue always sorted properly)
      else   
      {   
         return;
      }
   }    
   return;
}                       

void push_message_queue_ISR(uint8_t message_type)
// pushes a new item (attempt 0) into the message queue and sorts it.
// returns 1 if everything is good, 0 if queue is full
// message queue ISR only gets called in the pop message queue ISR so it's only resends of messages
//    (don't have to worry about error messages getting screwed up because of duplicate rejection logic)
{
   uint8_t n;
   struct MessageQueueItem temp_message_queue_item;
  
   //if queue is full, return 0
   if (global_current_message_queue_location == (MAX_MESSAGE_QUEUE_ITEMS - 1))
   {
      return;
   }
   
   // if you're trying to add an error message...
   if (message_type == MSG_MOTE_ERROR_MSG)
   {
      // look through the current queue
      for (n = global_current_message_queue_location; ((n > 0) && (n != 255)); n--)
      {
         // if there is already another error message on the queue, replace it
         if (global_message_queue[n].message_type == MSG_MOTE_ERROR_MSG)
         {
            // increase the mote sequence number (new message)
            // the ack from the previous one will basically get ignored
            global_message_queue[n].msg_seq = ++mote_msgSEQ;
            // reset the attempts to 0 (new message)
            global_message_queue[n].attempt_num = 0;
            return;
         }
      }
   }
   
   // increment the queue location and mote message sequence (always first attempt
   //    at a message in this routine
   global_current_message_queue_location++;
   mote_msgSEQ++;
   
   //set the new item at the top of the queue (will be sorted in a sec)
   global_message_queue[global_current_message_queue_location].time_to_send = global_rtc_time;
   global_message_queue[global_current_message_queue_location].message_type = message_type;
   global_message_queue[global_current_message_queue_location].msg_seq = mote_msgSEQ;
   global_message_queue[global_current_message_queue_location].attempt_num = 0;
   
   //starting at the new current queue location, sort through the queue
   //until the new item is in the right place
   for (n = global_current_message_queue_location; n > 0; n--)
   {
      //if queue items are not sorted properly
      if (global_message_queue[n].time_to_send > global_message_queue[n-1].time_to_send)
      {
         //do a swap
         memcpy(&temp_message_queue_item, &global_message_queue[n], sizeof(&temp_message_queue_item));
         memcpy(&global_message_queue[n], &global_message_queue[n-1], sizeof(&global_message_queue[n]));
         memcpy(&global_message_queue[n-1], &temp_message_queue_item, sizeof(&global_message_queue[n-1]));
      }
      //item is in the proper place (assuming queue always sorted properly)
      else
      {
         return;
      }
   }
   return;
}

void remove_message_queue_item(uint16_t msg_seq)
{
// Finds the message with the passed msg_seq and removes it from the queue,
//    shifting all other messages in the queue up
// Returns 1 if message removed, 0 if not found
// This function is ONLY run as a result of an ack'd unsolicted message                     

   uint8_t n, m;
   
   // no items in the queue (current location is 0-1)
   if (global_current_message_queue_location == 255)
   {  

      return;  
   }
   
   // search through the message queue from 0 to the current top of queue
   for (n = 0; n <= global_current_message_queue_location; n++)
   {
      // if you find the matching message
      if (global_message_queue[n].msg_seq == msg_seq)
      {
         // since this is only run from ack'd messages, we can assume this
         //    means the error message was recieved and we can clear the error
         //    bitfield
         if (global_message_queue[n].message_type == MSG_MOTE_ERROR_MSG)
         {
            global_error_message_bitfield = 0;
         }
         // shift everything over 1 place starting by overwriting the item
         //    to remove and ending by copying the top of the queue to the next item
         for (m = n; m < (MAX_MESSAGE_QUEUE_ITEMS - 1); m++)
         {
            memcpy(&global_message_queue[n], global_message_queue[n+1], sizeof(&global_message_queue[n]));
         }
         // clear out the last item
         memset(&global_message_queue[global_current_message_queue_location],EMPTY_MESSAGE_QUEUE,sizeof(&global_message_queue[global_current_message_queue_location]));
         // decrement the message queue current position
         global_current_message_queue_location--; 
         return;
      }
   }
   return;                     
}

void remove_message_queue_item_ISR(uint16_t msg_seq)
{
// Finds the message with the passed msg_seq and removes it from the queue,
//    shifting all other messages in the queue up
// Returns 1 if message removed, 0 if not found
// This function is ONLY run as a result of a message not getting ack'd after
//    being resent numerous times

   uint8_t n, m;

   // no items in the queue (current location is 0-1)
   if (global_current_message_queue_location == 255)
   {
      return;  
   }
   
   // search through the message queue from 0 to the current top of queue
   for (n = 0; n <= global_current_message_queue_location; n++)
   {
      // if you find the matching message
      if (global_message_queue[n].msg_seq == msg_seq)
      {
         // shift everything over 1 place starting by overwriting the item
         //    to remove and ending by copying the top of the queue to the next item
         for (m = n; m < (MAX_MESSAGE_QUEUE_ITEMS - 1); m++)
         {
            memcpy(&global_message_queue[n], global_message_queue[n+1], sizeof(&global_message_queue[n]));
         }
         // clear out the last item
         memset(&global_message_queue[global_current_message_queue_location],EMPTY_MESSAGE_QUEUE,sizeof(&global_message_queue[global_current_message_queue_location]));
         // decrement the message queue current position
         global_current_message_queue_location--;
         return;
      }
   }
   return;
}
   
